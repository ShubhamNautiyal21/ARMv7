Move Command-
--------------
mov r0,#1
mov r7,#1
swi 0

Add Command-
------------
mov r0,#1
mov r1,#2
add r2,r0,r1

Logic Operations-
-----------------
mov r0,#10
lsl r0,#1
lsr r0,#1
mov r1,r0,lsl #1
ror r1,#1


To create a list-
------------------
.data
 list:
    .word 1,2,3,4,5


Load into Registers-
---------------------
ldr r0, =list
ldr r1,[r0] // [r0,#12]


Branch-
-------
mov r0,#1
mov r1,#2
cmp r1,r0

bgt greater
bal default

greater:
  mov r2,#1
defaut:
  mov r2,#2

CMP and Other Commands-
------------------------
mov r0,#1
mov r1,#2
cmp r1,r0

addlt r2,#1 // add less than
addgt r2,#1 // add greater than

movge r2,#1

Add using branch-
------------------
mov r0,#1
mov r1,#2
bl addbranch
mov r2,#1

addbranch:
add r2,r0,r1
bx lr


Loop-
------
.global start
.equ endlist, 0xaaaaaaaa

start:
ldr r0,=list
ldr r3,=endlist
ldr r1,[r0]
add r2,r2,r1

loop:
ldr r1,[r9,#4]!
cmp r1,r3
beq exit 
add r2,r2,r1
bal loop

exit:

.data
 list:
    .word 1,2,3,4,5,6,7,8,9

Local and Global Scope using branch-
-------------------------------------

start:
mov r0,#1
mov r1,#2
push {r0,r1}
bl get_value
pop {r0,r1}
b end

get_value:
mov r0,#5
mov r1,#7
add r2,r0,r1
bx lr


end:



Accessing Switch and Led-
-------------------------
.equ switch, 0xff200040
.equ led, 0xff200000

.global start

start:
ldr r0,=switch
ldr r1,[r0]

ldr  r0,=led
ldr r1,[r0]
